version: "3.9"

services:
  db:
    image: ankane/pgvector:latest
    restart: always
    environment:
      POSTGRES_DB: forgefleet
      POSTGRES_USER: ff
      POSTGRES_PASSWORD: ffpass
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: always

  orchestrator:
    build:
      context: ../orchestrator
      dockerfile: Dockerfile
    restart: always
    env_file: ../.env
    environment:
      OPENAI_API_KEY: ${SUPPORT_AGENT_API_KEY}
    depends_on:
      - db
      - redis

  swift-orchestrator:
    build:
      context: ../orchestrator
      dockerfile: Dockerfile
    restart: always
    env_file: ../.env
    environment:
      OPENAI_API_KEY: ${SWIFT_AGENT_API_KEY}
    command: ["python", "-m", "orchestrator.swift_expert"]
    depends_on:
      - db
      - redis

  git-orchestrator:
    build:
      context: ../orchestrator
      dockerfile: Dockerfile
    restart: always
    env_file: ../.env
    environment:
      OPENAI_API_KEY: ${GIT_AGENT_API_KEY}
    command: ["python", "-m", "orchestrator.git_expert"]
    depends_on:
      - db
      - redis

  planner-orchestrator:
    build:
      context: ..
      dockerfile: orchestrator/Dockerfile
    image: infra-planner-orchestrator
    command: ["python", "-m", "orchestrator.planner_expert"]
    environment:
      - REDIS_URL=${REDIS_URL}
      - PLANNER_VECTOR_ID=${PLANNER_VECTOR_ID}
      - PLANNER_AGENT_API_KEY=${PLANNER_AGENT_API_KEY}
    depends_on:
      - redis

  support-orchestrator:
    build:
      context: ../orchestrator
      dockerfile: Dockerfile
    restart: always
    env_file: ../.env
    environment:
      OPENAI_API_KEY: ${SUPPORT_AGENT_API_KEY}
    command: ["python", "-m", "orchestrator.support_worker"]
    depends_on:
      - db
      - redis

  ui:
    build:
      context: ../ui
      dockerfile: Dockerfile
    restart: always
    env_file: ../.env
    depends_on:
      - orchestrator
      - swift-orchestrator
      - support-orchestrator
    expose:
      - "8000"

  caddy:
    image: caddy:2-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
    depends_on:
      - ui

volumes:
  db_data:
  caddy_data:
